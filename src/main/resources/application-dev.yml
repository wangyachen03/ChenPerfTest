server:
  port: 8080

spring:
  datasource:
    url: jdbc:mysql://152.136.129.34:3306/xia?useUnicode=true&characterEncoding=utf-8&useSSL=false
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: root
    password: secret
  redis:
    database: 0
    host: 152.136.129.34
    port: 6379
    password: qwer1234
    jedis:
      pool:
        max-active: 8
        max-wait: -1
        max-idle: 8
        min-idle: 0
    timeout: 300
#  kafka:
#    bootstrap-servers: 152.136.129.34:9092
#    producer:
#      retries: 0    #发生错误时消息重发的次数
#      batch-size: 16384   #当有多个消息需要被发送到同一个分区时，生产者会把他们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节计算。
#      buffer-memory: 33554432  #设置生产者内存缓冲去多的大小
#      key-serializer: org.apache.kafka.common.serialization.StringSerializer  #键的序列化方式
#      value-serializer: org.apache.kafka.common.serialization.StringSerializer  #值的序列化方式
#      # ack=0 生产着在成功写入消息之前不会等待任何来自服务器的响应
#      # ack-1 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应
#      # ack=all  只有当前所有参与复制的节点全部收到消息是，生产着才会收到一个来自服务器的成功响应
#      acks: 1
#    consumer:
#      auto-commit-interval: 1S #自动提交的时间间隔
#      # latest (默认值)再偏移量无效的情况下，消费者将从最新的记录开始读取数据
#      # earliest 在偏移量无效的情况下，消费者将从起始位置读取分区的记录
#      auto-offset-reset: earliest
#      enable-auto-commit: false  #是否自动提交偏移量，默认值是true，为了避免出现重复数据和数据丢失，可以把它设置为false，然后手动提交偏移量
#      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer  #键的反序列方式
#      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer  #值的反序列方式
#    listener:
#      concurrency: 5  #在侦听器容器中运行的线程数
#      ack-mode: manual_immediate  #listner负责ack，每调用一次，就立即commit
#      missing-topics-fatal: false


mybatis:
  mapper-locations: classpath:mapper/*Mapper.xml
  type-aliases-package: com.chen.xia.entity